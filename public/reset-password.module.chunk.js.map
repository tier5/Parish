{"version":3,"sources":["/var/www/Parish/resources/assets/Parish/src/app/auth/reset-password/reset-password-routing.module.ts","/var/www/Parish/resources/assets/Parish/src/app/auth/reset-password/reset-password.component.css","/var/www/Parish/resources/assets/Parish/src/app/auth/reset-password/reset-password.component.html","/var/www/Parish/resources/assets/Parish/src/app/auth/reset-password/reset-password.component.ts","/var/www/Parish/resources/assets/Parish/src/app/auth/reset-password/reset-password.module.ts","/var/www/Parish/resources/assets/Parish/src/app/auth/reset-password/reset-password.service.ts"],"names":[],"mappings":"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","file":"reset-password.module.chunk.js","sourcesContent":["import { NgModule} from \"@angular/core\";\nimport { RouterModule, Routes } from \"@angular/router\";\n\nimport { ResetPasswordComponent } from \"./reset-password.component\";\n\nconst resetPasswordRoutes: Routes = [\n    { path: '', component: ResetPasswordComponent }\n];\n@NgModule({\n    imports: [ RouterModule.forChild( resetPasswordRoutes ) ],\n    exports: [ RouterModule ]\n})\nexport class ResetPasswordRoutingModule { }\n\n\n// WEBPACK FOOTER //\n// /var/www/Parish/resources/assets/Parish/src/app/auth/reset-password/reset-password-routing.module.ts","exports = module.exports = require(\"../../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \"input.ng-invalid.ng-touched {\\n    border: 2px solid #a94442;\\n}\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// /var/www/Parish/resources/assets/Parish/src/app/auth/reset-password/reset-password.component.css\n// module id = ../../../../../src/app/auth/reset-password/reset-password.component.css\n// module chunks = reset-password.module","module.exports = \"<div class=\\\"row\\\">\\n  <div class=\\\"col-xs-10 col-xs-offset-1 col-sm-8 col-sm-offset-2 col-md-4 col-md-offset-4\\\">\\n    <div class=\\\"login-panel panel panel-default\\\">\\n      <div class=\\\"panel-heading\\\"><strong>Reset Password</strong></div>\\n      <div class=\\\"panel-body\\\">\\n          <div *ngIf=\\\"!rpStatus && responseReceived\\\" class=\\\"alert alert-danger\\\">\\n              <strong>{{ rpMsg }}</strong>\\n          </div>\\n          <div *ngIf=\\\"rpStatus && responseReceived\\\" class=\\\"alert alert-success\\\">\\n              <strong>{{ rpMsg }}</strong>\\n          </div>\\n          <form *ngIf=\\\"!redirect\\\" [formGroup]=\\\"formRP\\\" (ngSubmit)=\\\"onSubmit()\\\">\\n\\n          <fieldset>\\n\\n            <!-- Password -->\\n            <div class=\\\"form-group\\\">\\n              <input\\n                      class=\\\"form-control\\\"\\n                      formControlName=\\\"password\\\"\\n                      type=\\\"password\\\"\\n                      placeholder=\\\"Password\\\"\\n              >\\n            </div>\\n            <div *ngIf=\\\"formRP.get('password').invalid && formRP.get('password').touched\\\">\\n              <div class=\\\"alert alert-danger\\\" *ngIf=\\\"formRP.get('password').hasError('required')\\\">\\n                Your Password is Required!\\n              </div>\\n            </div>\\n\\n            <!-- Confirm Password -->\\n            <div class=\\\"form-group\\\">\\n              <input\\n                      class=\\\"form-control\\\"\\n                      formControlName=\\\"confirm_password\\\"\\n                      type=\\\"password\\\"\\n                      placeholder=\\\"Confirm Password\\\"\\n              >\\n            </div>\\n            <div *ngIf=\\\"formRP.get('confirm_password').invalid && formRP.get('confirm_password').touched\\\">\\n              <div class=\\\"alert alert-danger\\\" >\\n                <div *ngIf=\\\"formRP.get('confirm_password').hasError('required')\\\">\\n                  Confirm password is Required!\\n                </div>\\n                <div *ngIf=\\\"formRP.get('confirm_password').hasError('confirmPassword')\\\">\\n                  Confirm Password did not Match!\\n                </div>\\n              </div>\\n            </div>\\n\\n            <button class=\\\"btn btn-primary\\\" [disabled]=\\\"formRP.invalid || rpRequested\\\">\\n              <i *ngIf=\\\"rpRequested\\\" class=\\\"fa fa-spinner fa-pulse fa-lg fa-fw\\\"></i>\\n              Reset Password\\n            </button>\\n            <button type=\\\"reset\\\" class=\\\"btn btn-default\\\" [disabled]=\\\"rpRequested\\\" (click)=\\\"onReset()\\\">Reset</button>\\n            <button type=\\\"button\\\" class=\\\"btn btn-primary pull-right\\\" [disabled]=\\\"rpRequested\\\" (click)=\\\"onNavigate()\\\">Login</button>\\n          </fieldset>\\n        </form>\\n        <div class=\\\"row\\\" *ngIf=\\\"redirect\\\">\\n              <div class=\\\"col-md-12 col-sm-12 redirect\\\">\\n                  <p>We are <strong>redirecting</strong> you to the Sign In page within <strong>{{ clock }} seconds</strong>.\\n                      <br/>Please wait or <a routerLink=\\\"/login\\\">click here</a> to go to <strong>Log In</strong> page.\\n                  </p>\\n              </div>\\n          </div>\\n      </div>\\n    </div>\\n  </div><!-- /.col-->\\n</div><!-- /.row -->\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// /var/www/Parish/resources/assets/Parish/src/app/auth/reset-password/reset-password.component.html\n// module id = ../../../../../src/app/auth/reset-password/reset-password.component.html\n// module chunks = reset-password.module","import { ActivatedRoute, Params, Router } from \"@angular/router\";\nimport { AbstractControl, FormBuilder, FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport { Component } from '@angular/core';\nimport { Response } from \"@angular/http\";\n\nimport { ResetPasswordService } from \"./reset-password.service\";\n\n@Component({\n  selector: 'app-reset-password',\n  templateUrl: './reset-password.component.html',\n  styleUrls: ['./reset-password.component.css']\n})\nexport class ResetPasswordComponent {\n\n    /** Variable declarations */\n    formRP: FormGroup;\n    responseReceived = false;\n    rpStatus = false;\n    rpRequested = false;\n    rpMsg: string;\n    redirect: boolean = false;\n    clock: number = 10;\n    paramData = {\n        email: '',\n        token: ''\n    };\n\n    /** Service injection */\n    constructor( private activatedRoute: ActivatedRoute,\n                 private resetPasswordService: ResetPasswordService,\n                 private router: Router,\n                 private formBuilder: FormBuilder ) { }\n\n    /** Function to be executed when component initializes */\n    ngOnInit() {\n        this.formRP = this.formBuilder.group( {\n            'password' : new FormControl( null, Validators.required ),\n            'confirm_password' : new FormControl( null, Validators.required )\n        }, {validator: this.confirmPassword} );\n        /** Checking route params to get id of area to edit */\n        this.activatedRoute.params.subscribe(\n            (params: Params) => {\n                this.paramData.email = params['email'];\n                this.paramData.token = params['token'];\n            },\n            (error: Response) => {\n                console.log(error);\n            },\n        );\n    }\n\n    /** Custom confirm password validator */\n    confirmPassword = (control: AbstractControl): {[key: string]: boolean} => {\n\n        const pass = control.get('password');\n        const cnfPass = control.get('confirm_password');\n\n        if (!pass || !cnfPass) {\n            return null;\n        }\n\n        if (pass.value === cnfPass.value){\n            return null\n        } else{\n            control.get('confirm_password').setErrors( { confirmPassword: true } );\n            return { confirmPassword: true };\n        }\n    }\n\n    /** Function call on submit */\n    onSubmit() {\n        this.rpRequested = true;\n        const body = this.formRP.value;\n\n        this.resetPasswordService.resetPassword( Object.assign( body, this.paramData ) )\n            .subscribe(\n                ( response: Response ) => {\n                    if(response.json().status){\n                        this.rpStatus = true;\n                        this.rpMsg = response.json().message;\n                        this.rpRequested = false;\n                    } else {\n                        this.rpStatus = false;\n                        this.rpMsg = response.json().error;\n                        this.rpRequested = false;\n                    }\n                },\n                ( error: Response ) => {\n                    this.rpStatus = false;\n                    this.rpMsg = error.json().error;\n                    this.responseReceived = true;\n                    this.rpRequested = false;\n                    setTimeout( () => {\n                        this.responseReceived = false;\n                    }, 3000)\n                },\n                () => {\n                    this.formRP.reset();\n                    this.responseReceived = true;\n                    this.rpRequested = false;\n                    setTimeout( () => {\n                        this.responseReceived = false;\n                    }, 3000);\n                    /** Redirecting to login page */\n                    this.redirect = true;\n                    setInterval(() => {\n                        if(this.clock-- == 1){\n                            this.router.navigate(['/login']);\n                        }\n                    }, 1000);\n                }\n            );\n    }\n\n    /** Function call to reset form */\n    onReset() {\n        this.formRP.reset();\n    }\n\n    /** Function call to navigate to login page */\n    onNavigate() {\n        this.router.navigate(['/login']);\n    }\n\n}\n\n\n// WEBPACK FOOTER //\n// /var/www/Parish/resources/assets/Parish/src/app/auth/reset-password/reset-password.component.ts","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { ResetPasswordComponent } from './reset-password.component';\nimport { ResetPasswordService } from \"./reset-password.service\";\nimport { ReactiveFormsModule } from \"@angular/forms\";\nimport { ResetPasswordRoutingModule } from \"./reset-password-routing.module\";\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    ResetPasswordRoutingModule\n  ],\n  declarations: [ ResetPasswordComponent ],\n  providers: [ ResetPasswordService ]\n})\nexport class ResetPasswordModule { }\n\n\n\n// WEBPACK FOOTER //\n// /var/www/Parish/resources/assets/Parish/src/app/auth/reset-password/reset-password.module.ts","import { Injectable } from '@angular/core';\nimport { Http,Headers } from \"@angular/http\";\nimport { Observable } from \"rxjs/Observable\";\n\nimport { environment } from \"../../../environments/environment.prod\";\n\n@Injectable()\nexport class ResetPasswordService {\n\n    /** Service injection */\n    constructor( private http: Http ) { }\n\n    /** Function call for resetting password */\n    resetPassword( body: { email: string } ): Observable<any> {\n        const header = new Headers( { 'X-Requested-With': 'XMLHttpRequest' } );\n        return this.http.post( environment.API_URL + 'reset-password', body, { headers: header } );\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// /var/www/Parish/resources/assets/Parish/src/app/auth/reset-password/reset-password.service.ts"],"sourceRoot":"webpack:///"}